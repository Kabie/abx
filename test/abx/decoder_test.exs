defmodule ABX.DecoderTest do
  use ExUnit.Case
  doctest ABX.Decoder

  alias ABX.Decoder
  alias ABX.Types.Address
  import ABX, only: [sigil_A: 2]

  test "decode address" do
    assert Decoder.decode_type(<<1::256>>, :address, 0) == Address.cast(1)
  end

  test "decode int<X>" do
    int128_1 = <<0::signed-128, 1::signed-128>>
    assert Decoder.decode_type(int128_1, {:int, 128}, 0) == {:ok, 1}

    int128_neg1 = << -1::signed-128, -1::signed-128>>
    assert Decoder.decode_type(int128_neg1, {:int, 128}, 0) == {:ok, -1}
  end

  test "decode complex types" do
    types = [:address, {:uint, 256}, :bytes, {:uint, 8}, {:uint, 256}, {:uint, 256}, {:uint, 256}, :address, :address, :bytes]

    data = """
    0000000000000000000000006ae6f87993506d270767ba063ccf0c5e6100ec4e\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000140\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000160\
    0000000000000000000000000000000000000000000000000000000000000000\
    0000000000000000000000000000000000000000000000000000000000000041\
    00000000000000000000000032e9437052eddc9e9fdfd0d5bcaedd6b8ea11894\
    0000000000000000000000000000000000000000000000000000000000000000\
    0100000000000000000000000000000000000000000000000000000000000000\
    """
    |> Base.decode16!(case: :mixed)

    assert Decoder.decode(data, types) == {:ok, [
      ~A"0x6Ae6F87993506D270767bA063Ccf0c5e6100EC4E",
      0, "", 0, 0, 0, 0,
      ~A"0x0000000000000000000000000000000000000000",
      ~A"0x0000000000000000000000000000000000000000",
      <<0x00000000000000000000000032e9437052eddc9e9fdfd0d5bcaedd6b8ea11894000000000000000000000000000000000000000000000000000000000000000001::0x41*8>>
    ]}
  end
end
